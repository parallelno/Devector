.\" This manpage content is licensed under Creative Commons
.\"  Attribution 4.0 International (CC BY 4.0)
.\"   https://creativecommons.org/licenses/by/4.0/
.\" This manpage was generated from SDL's wiki page for SDL_CreateRWLock:
.\"   https://wiki.libsdl.org/SDL_CreateRWLock
.\" Generated with SDL/build-scripts/wikiheaders.pl
.\"  revision SDL-3.1.2-no-vcs
.\" Please report issues in this manpage's content at:
.\"   https://github.com/libsdl-org/sdlwiki/issues/new
.\" Please report issues in the generation of this manpage from the wiki at:
.\"   https://github.com/libsdl-org/SDL/issues/new?title=Misgenerated%20manpage%20for%20SDL_CreateRWLock
.\" SDL can be found at https://libsdl.org/
.de URL
\$2 \(laURL: \$1 \(ra\$3
..
.if \n[.g] .mso www.tmac
.TH SDL_CreateRWLock 3 "SDL 3.1.2" "Simple Directmedia Layer" "SDL3 FUNCTIONS"
.SH NAME
SDL_CreateRWLock \- Create a new read/write lock\[char46]
.SH HEADER FILE
Defined in SDL3/SDL_mutex\[char46]h

.SH SYNOPSIS
.nf
.B #include \(dqSDL3/SDL.h\(dq
.PP
.BI "SDL_RWLock* SDL_CreateRWLock(void);
.fi
.SH DESCRIPTION
A read/write lock is useful for situations where you have multiple threads
trying to access a resource that is rarely updated\[char46] All threads requesting
a read-only lock will be allowed to run in parallel; if a thread requests a
write lock, it will be provided exclusive access\[char46] This makes it safe for
multiple threads to use a resource at the same time if they promise not to
change it, and when it has to be changed, the rwlock will serve as a
gateway to make sure those changes can be made safely\[char46]

In the right situation, a rwlock can be more efficient than a mutex, which
only lets a single thread proceed at a time, even if it won't be modifying
the data\[char46]

All newly-created read/write locks begin in the _unlocked_ state\[char46]

Calls to 
.BR SDL_LockRWLockForReading
() and

.BR SDL_LockRWLockForWriting
 will not return while
the rwlock is locked _for writing_ by another thread\[char46] See

.BR SDL_TryLockRWLockForReading
() and

.BR SDL_TryLockRWLockForWriting
() to attempt to
lock without blocking\[char46]

SDL read/write locks are only recursive for read-only locks! They are not
guaranteed to be fair, or provide access in a FIFO manner! They are not
guaranteed to favor writers\[char46] You may not lock a rwlock for both read-only
and write access at the same time from the same thread (so you can't
promote your read-only lock to a write lock without unlocking first)\[char46]

.SH RETURN VALUE
Returns the initialized and unlocked read/write lock or NULL on failure;
call 
.BR SDL_GetError
() for more information\[char46]

.SH AVAILABILITY
This function is available since SDL 3\[char46]0\[char46]0\[char46]

.SH SEE ALSO
.BR SDL_DestroyRWLock (3),
.BR SDL_LockRWLockForReading (3),
.BR SDL_LockRWLockForWriting (3),
.BR SDL_TryLockRWLockForReading (3),
.BR SDL_TryLockRWLockForWriting (3),
.BR SDL_UnlockRWLock (3)
