.\" This manpage content is licensed under Creative Commons
.\"  Attribution 4.0 International (CC BY 4.0)
.\"   https://creativecommons.org/licenses/by/4.0/
.\" This manpage was generated from SDL's wiki page for SDL_IOStreamInterface:
.\"   https://wiki.libsdl.org/SDL_IOStreamInterface
.\" Generated with SDL/build-scripts/wikiheaders.pl
.\"  revision SDL-3.1.2-no-vcs
.\" Please report issues in this manpage's content at:
.\"   https://github.com/libsdl-org/sdlwiki/issues/new
.\" Please report issues in the generation of this manpage from the wiki at:
.\"   https://github.com/libsdl-org/SDL/issues/new?title=Misgenerated%20manpage%20for%20SDL_IOStreamInterface
.\" SDL can be found at https://libsdl.org/
.de URL
\$2 \(laURL: \$1 \(ra\$3
..
.if \n[.g] .mso www.tmac
.TH SDL_IOStreamInterface 3type "SDL 3.1.2" "Simple Directmedia Layer" "SDL3 DATATYPES"
.SH NAME
SDL_IOStreamInterface \- The function pointers that drive an 
.BR SDL_IOStream
\[char46]
.SH HEADER FILE
Defined in SDL3/SDL_iostream\[char46]h

.SH SYNOPSIS
.nf
.B #include \(dqSDL3/SDL.h\(dq
.PP
.BI "typedef struct SDL_IOStreamInterface
.BI "{
.BI "    /**
.BI "     *  Return the number of bytes in this SDL_IOStream
.BI "     *
.BI "     *  \return the total size of the data stream, or -1 on error.
.BI "     */
.BI "    Sint64 (SDLCALL *size)(void *userdata);
.BI "
.BI "    /**
.BI "     *  Seek to `offset` relative to `whence`, one of stdio's whence values:
.BI "     *  SDL_IO_SEEK_SET, SDL_IO_SEEK_CUR, SDL_IO_SEEK_END
.BI "     *
.BI "     *  \return the final offset in the data stream, or -1 on error.
.BI "     */
.BI "    Sint64 (SDLCALL *seek)(void *userdata, Sint64 offset, int whence);
.BI "
.BI "    /**
.BI "     *  Read up to `size` bytes from the data stream to the area pointed
.BI "     *  at by `ptr`.
.BI "     *
.BI "     *  On an incomplete read, you should set `*status` to a value from the
.BI "     *  SDL_IOStatus enum. You do not have to explicitly set this on
.BI "     *  a complete, successful read.
.BI "     *
.BI "     *  \return the number of bytes read
.BI "     */
.BI "    size_t (SDLCALL *read)(void *userdata, void *ptr, size_t size, SDL_IOStatus *status);
.BI "
.BI "    /**
.BI "     *  Write exactly `size` bytes from the area pointed at by `ptr`
.BI "     *  to data stream.
.BI "     *
.BI "     *  On an incomplete write, you should set `*status` to a value from the
.BI "     *  SDL_IOStatus enum. You do not have to explicitly set this on
.BI "     *  a complete, successful write.
.BI "     *
.BI "     *  \return the number of bytes written
.BI "     */
.BI "    size_t (SDLCALL *write)(void *userdata, const void *ptr, size_t size, SDL_IOStatus *status);
.BI "
.BI "    /**
.BI "     *  Close and free any allocated resources.
.BI "     *
.BI "     *  The SDL_IOStream is still destroyed even if this fails, so clean up anything
.BI "     *  even if flushing to disk returns an error.
.BI "     *
.BI "     *  \return 0 if successful or -1 on write error when flushing data.
.BI "     */
.BI "    int (SDLCALL *close)(void *userdata);
.BI "} SDL_IOStreamInterface;
.fi
.SH DESCRIPTION
Applications can provide this struct to 
.BR SDL_OpenIO
() to
create their own implementation of 
.BR SDL_IOStream
\[char46] This is
not necessarily required, as SDL already offers several common types of I/O
streams, via functions like 
.BR SDL_IOFromFile
() and

.BR SDL_IOFromMem
()\[char46]

.SH AVAILABILITY
This struct is available since SDL 3\[char46]0\[char46]0\[char46]

