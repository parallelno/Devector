.\" This manpage content is licensed under Creative Commons
.\"  Attribution 4.0 International (CC BY 4.0)
.\"   https://creativecommons.org/licenses/by/4.0/
.\" This manpage was generated from SDL's wiki page for SDL_StorageInterface:
.\"   https://wiki.libsdl.org/SDL_StorageInterface
.\" Generated with SDL/build-scripts/wikiheaders.pl
.\"  revision SDL-3.1.2-no-vcs
.\" Please report issues in this manpage's content at:
.\"   https://github.com/libsdl-org/sdlwiki/issues/new
.\" Please report issues in the generation of this manpage from the wiki at:
.\"   https://github.com/libsdl-org/SDL/issues/new?title=Misgenerated%20manpage%20for%20SDL_StorageInterface
.\" SDL can be found at https://libsdl.org/
.de URL
\$2 \(laURL: \$1 \(ra\$3
..
.if \n[.g] .mso www.tmac
.TH SDL_StorageInterface 3type "SDL 3.1.2" "Simple Directmedia Layer" "SDL3 DATATYPES"
.SH NAME
SDL_StorageInterface \- Function interface for 
.BR SDL_Storage
\[char46]
.SH HEADER FILE
Defined in SDL3/SDL_storage\[char46]h

.SH SYNOPSIS
.nf
.B #include \(dqSDL3/SDL.h\(dq
.PP
.BI "typedef struct SDL_StorageInterface
.BI "{
.BI "    /* Called when the storage is closed */
.BI "    int (SDLCALL *close)(void *userdata);
.BI "
.BI "    /* Optional, returns whether the storage is currently ready for access */
.BI "    SDL_bool (SDLCALL *ready)(void *userdata);
.BI "
.BI "    /* Enumerate a directory, optional for write-only storage */
.BI "    int (SDLCALL *enumerate)(void *userdata, const char *path, SDL_EnumerateDirectoryCallback callback, void *callback_userdata);
.BI "
.BI "    /* Get path information, optional for write-only storage */
.BI "    int (SDLCALL *info)(void *userdata, const char *path, SDL_PathInfo *info);
.BI "
.BI "    /* Read a file from storage, optional for write-only storage */
.BI "    int (SDLCALL *read_file)(void *userdata, const char *path, void *destination, Uint64 length);
.BI "
.BI "    /* Write a file to storage, optional for read-only storage */
.BI "    int (SDLCALL *write_file)(void *userdata, const char *path, const void *source, Uint64 length);
.BI "
.BI "    /* Create a directory, optional for read-only storage */
.BI "    int (SDLCALL *mkdir)(void *userdata, const char *path);
.BI "
.BI "    /* Remove a file or empty directory, optional for read-only storage */
.BI "    int (SDLCALL *remove)(void *userdata, const char *path);
.BI "
.BI "    /* Rename a path, optional for read-only storage */
.BI "    int (SDLCALL *rename)(void *userdata, const char *oldpath, const char *newpath);
.BI "
.BI "    /* Get the space remaining, optional for read-only storage */
.BI "    Uint64 (SDLCALL *space_remaining)(void *userdata);
.BI "} SDL_StorageInterface;
.fi
.SH DESCRIPTION
Apps that want to supply a custom implementation of

.BR SDL_Storage
 will fill in all the functions in this struct,
and then pass it to 
.BR SDL_OpenStorage
 to create a custom

.BR SDL_Storage
 object\[char46]

It is not usually necessary to do this; SDL provides standard
implementations for many things you might expect to do with an

.BR SDL_Storage
\[char46]

.SH AVAILABILITY
This struct is available since SDL 3\[char46]0\[char46]0\[char46]

