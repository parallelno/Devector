.\" This manpage content is licensed under Creative Commons
.\"  Attribution 4.0 International (CC BY 4.0)
.\"   https://creativecommons.org/licenses/by/4.0/
.\" This manpage was generated from SDL's wiki page for SDL_EventType:
.\"   https://wiki.libsdl.org/SDL_EventType
.\" Generated with SDL/build-scripts/wikiheaders.pl
.\"  revision SDL-3.1.2-no-vcs
.\" Please report issues in this manpage's content at:
.\"   https://github.com/libsdl-org/sdlwiki/issues/new
.\" Please report issues in the generation of this manpage from the wiki at:
.\"   https://github.com/libsdl-org/SDL/issues/new?title=Misgenerated%20manpage%20for%20SDL_EventType
.\" SDL can be found at https://libsdl.org/
.de URL
\$2 \(laURL: \$1 \(ra\$3
..
.if \n[.g] .mso www.tmac
.TH SDL_EventType 3type "SDL 3.1.2" "Simple Directmedia Layer" "SDL3 DATATYPES"
.SH NAME
SDL_EventType \- The types of events that can be delivered\[char46]
.SH HEADER FILE
Defined in SDL3/SDL_events\[char46]h

.SH SYNOPSIS
.nf
.B #include \(dqSDL3/SDL.h\(dq
.PP
.BI "typedef enum SDL_EventType
.BI "{
.BI "    SDL_EVENT_FIRST     = 0,     /**< Unused (do not remove) */
.BI "
.BI "    /* Application events */
.BI "    SDL_EVENT_QUIT           = 0x100, /**< User-requested quit */
.BI "
.BI "    /* These application events have special meaning on iOS, see README-ios.md for details */
.BI "    SDL_EVENT_TERMINATING,        /**< The application is being terminated by the OS
.BI "                                     Called on iOS in applicationWillTerminate()
.BI "                                     Called on Android in onDestroy()
.BI "                                */
.BI "    SDL_EVENT_LOW_MEMORY,          /**< The application is low on memory, free memory if possible.
.BI "                                     Called on iOS in applicationDidReceiveMemoryWarning()
.BI "                                     Called on Android in onLowMemory()
.BI "                                */
.BI "    SDL_EVENT_WILL_ENTER_BACKGROUND, /**< The application is about to enter the background
.BI "                                     Called on iOS in applicationWillResignActive()
.BI "                                     Called on Android in onPause()
.BI "                                */
.BI "    SDL_EVENT_DID_ENTER_BACKGROUND, /**< The application did enter the background and may not get CPU for some time
.BI "                                     Called on iOS in applicationDidEnterBackground()
.BI "                                     Called on Android in onPause()
.BI "                                */
.BI "    SDL_EVENT_WILL_ENTER_FOREGROUND, /**< The application is about to enter the foreground
.BI "                                     Called on iOS in applicationWillEnterForeground()
.BI "                                     Called on Android in onResume()
.BI "                                */
.BI "    SDL_EVENT_DID_ENTER_FOREGROUND, /**< The application is now interactive
.BI "                                     Called on iOS in applicationDidBecomeActive()
.BI "                                     Called on Android in onResume()
.BI "                                */
.BI "
.BI "    SDL_EVENT_LOCALE_CHANGED,  /**< The user's locale preferences have changed. */
.BI "
.BI "    SDL_EVENT_SYSTEM_THEME_CHANGED, /**< The system theme changed */
.BI "
.BI "    /* Display events */
.BI "    /* 0x150 was SDL_DISPLAYEVENT, reserve the number for sdl2-compat */
.BI "    SDL_EVENT_DISPLAY_ORIENTATION = 0x151, /**< Display orientation has changed to data1 */
.BI "    SDL_EVENT_DISPLAY_ADDED,               /**< Display has been added to the system */
.BI "    SDL_EVENT_DISPLAY_REMOVED,             /**< Display has been removed from the system */
.BI "    SDL_EVENT_DISPLAY_MOVED,               /**< Display has changed position */
.BI "    SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED, /**< Display has changed content scale */
.BI "    SDL_EVENT_DISPLAY_HDR_STATE_CHANGED,   /**< Display HDR properties have changed */
.BI "    SDL_EVENT_DISPLAY_FIRST = SDL_EVENT_DISPLAY_ORIENTATION,
.BI "    SDL_EVENT_DISPLAY_LAST = SDL_EVENT_DISPLAY_HDR_STATE_CHANGED,
.BI "
.BI "    /* Window events */
.BI "    /* 0x200 was SDL_WINDOWEVENT, reserve the number for sdl2-compat */
.BI "    /* 0x201 was SDL_EVENT_SYSWM, reserve the number for sdl2-compat */
.BI "    SDL_EVENT_WINDOW_SHOWN = 0x202,     /**< Window has been shown */
.BI "    SDL_EVENT_WINDOW_HIDDEN,            /**< Window has been hidden */
.BI "    SDL_EVENT_WINDOW_EXPOSED,           /**< Window has been exposed and should be redrawn */
.BI "    SDL_EVENT_WINDOW_MOVED,             /**< Window has been moved to data1, data2 */
.BI "    SDL_EVENT_WINDOW_RESIZED,           /**< Window has been resized to data1xdata2 */
.BI "    SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED,/**< The pixel size of the window has changed to data1xdata2 */
.BI "    SDL_EVENT_WINDOW_MINIMIZED,         /**< Window has been minimized */
.BI "    SDL_EVENT_WINDOW_MAXIMIZED,         /**< Window has been maximized */
.BI "    SDL_EVENT_WINDOW_RESTORED,          /**< Window has been restored to normal size and position */
.BI "    SDL_EVENT_WINDOW_MOUSE_ENTER,       /**< Window has gained mouse focus */
.BI "    SDL_EVENT_WINDOW_MOUSE_LEAVE,       /**< Window has lost mouse focus */
.BI "    SDL_EVENT_WINDOW_FOCUS_GAINED,      /**< Window has gained keyboard focus */
.BI "    SDL_EVENT_WINDOW_FOCUS_LOST,        /**< Window has lost keyboard focus */
.BI "    SDL_EVENT_WINDOW_CLOSE_REQUESTED,   /**< The window manager requests that the window be closed */
.BI "    SDL_EVENT_WINDOW_TAKE_FOCUS,        /**< Window is being offered a focus (should SetWindowInputFocus() on itself or a subwindow, or ignore) */
.BI "    SDL_EVENT_WINDOW_HIT_TEST,          /**< Window had a hit test that wasn't SDL_HITTEST_NORMAL */
.BI "    SDL_EVENT_WINDOW_ICCPROF_CHANGED,   /**< The ICC profile of the window's display has changed */
.BI "    SDL_EVENT_WINDOW_DISPLAY_CHANGED,   /**< Window has been moved to display data1 */
.BI "    SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED, /**< Window display scale has been changed */
.BI "    SDL_EVENT_WINDOW_OCCLUDED,          /**< The window has been occluded */
.BI "    SDL_EVENT_WINDOW_ENTER_FULLSCREEN,  /**< The window has entered fullscreen mode */
.BI "    SDL_EVENT_WINDOW_LEAVE_FULLSCREEN,  /**< The window has left fullscreen mode */
.BI "    SDL_EVENT_WINDOW_DESTROYED,         /**< The window with the associated ID is being or has been destroyed. If this message is being handled
.BI "                                             in an event watcher, the window handle is still valid and can still be used to retrieve any userdata
.BI "                                             associated with the window. Otherwise, the handle has already been destroyed and all resources
.BI "                                             associated with it are invalid */
.BI "    SDL_EVENT_WINDOW_PEN_ENTER,         /**< Window has gained focus of the pressure-sensitive pen with ID "data1" */
.BI "    SDL_EVENT_WINDOW_PEN_LEAVE,         /**< Window has lost focus of the pressure-sensitive pen with ID "data1" */
.BI "    SDL_EVENT_WINDOW_FIRST = SDL_EVENT_WINDOW_SHOWN,
.BI "    SDL_EVENT_WINDOW_LAST = SDL_EVENT_WINDOW_PEN_LEAVE,
.BI "
.BI "    /* Keyboard events */
.BI "    SDL_EVENT_KEY_DOWN        = 0x300, /**< Key pressed */
.BI "    SDL_EVENT_KEY_UP,                  /**< Key released */
.BI "    SDL_EVENT_TEXT_EDITING,            /**< Keyboard text editing (composition) */
.BI "    SDL_EVENT_TEXT_INPUT,              /**< Keyboard text input */
.BI "    SDL_EVENT_KEYMAP_CHANGED,          /**< Keymap changed due to a system event such as an
.BI "                                            input language or keyboard layout change. */
.BI "    SDL_EVENT_KEYBOARD_ADDED,          /**< A new keyboard has been inserted into the system */
.BI "    SDL_EVENT_KEYBOARD_REMOVED,        /**< A keyboard has been removed */
.BI "
.BI "    /* Mouse events */
.BI "    SDL_EVENT_MOUSE_MOTION    = 0x400, /**< Mouse moved */
.BI "    SDL_EVENT_MOUSE_BUTTON_DOWN,       /**< Mouse button pressed */
.BI "    SDL_EVENT_MOUSE_BUTTON_UP,         /**< Mouse button released */
.BI "    SDL_EVENT_MOUSE_WHEEL,             /**< Mouse wheel motion */
.BI "    SDL_EVENT_MOUSE_ADDED,             /**< A new mouse has been inserted into the system */
.BI "    SDL_EVENT_MOUSE_REMOVED,           /**< A mouse has been removed */
.BI "
.BI "    /* Joystick events */
.BI "    SDL_EVENT_JOYSTICK_AXIS_MOTION  = 0x600, /**< Joystick axis motion */
.BI "    SDL_EVENT_JOYSTICK_BALL_MOTION,          /**< Joystick trackball motion */
.BI "    SDL_EVENT_JOYSTICK_HAT_MOTION,           /**< Joystick hat position change */
.BI "    SDL_EVENT_JOYSTICK_BUTTON_DOWN,          /**< Joystick button pressed */
.BI "    SDL_EVENT_JOYSTICK_BUTTON_UP,            /**< Joystick button released */
.BI "    SDL_EVENT_JOYSTICK_ADDED,                /**< A new joystick has been inserted into the system */
.BI "    SDL_EVENT_JOYSTICK_REMOVED,              /**< An opened joystick has been removed */
.BI "    SDL_EVENT_JOYSTICK_BATTERY_UPDATED,      /**< Joystick battery level change */
.BI "    SDL_EVENT_JOYSTICK_UPDATE_COMPLETE,      /**< Joystick update is complete */
.BI "
.BI "    /* Gamepad events */
.BI "    SDL_EVENT_GAMEPAD_AXIS_MOTION  = 0x650, /**< Gamepad axis motion */
.BI "    SDL_EVENT_GAMEPAD_BUTTON_DOWN,          /**< Gamepad button pressed */
.BI "    SDL_EVENT_GAMEPAD_BUTTON_UP,            /**< Gamepad button released */
.BI "    SDL_EVENT_GAMEPAD_ADDED,               /**< A new gamepad has been inserted into the system */
.BI "    SDL_EVENT_GAMEPAD_REMOVED,             /**< An opened gamepad has been removed */
.BI "    SDL_EVENT_GAMEPAD_REMAPPED,            /**< The gamepad mapping was updated */
.BI "    SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN,        /**< Gamepad touchpad was touched */
.BI "    SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION,      /**< Gamepad touchpad finger was moved */
.BI "    SDL_EVENT_GAMEPAD_TOUCHPAD_UP,          /**< Gamepad touchpad finger was lifted */
.BI "    SDL_EVENT_GAMEPAD_SENSOR_UPDATE,        /**< Gamepad sensor was updated */
.BI "    SDL_EVENT_GAMEPAD_UPDATE_COMPLETE,      /**< Gamepad update is complete */
.BI "    SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED,  /**< Gamepad Steam handle has changed */
.BI "
.BI "    /* Touch events */
.BI "    SDL_EVENT_FINGER_DOWN      = 0x700,
.BI "    SDL_EVENT_FINGER_UP,
.BI "    SDL_EVENT_FINGER_MOTION,
.BI "
.BI "    /* 0x800, 0x801, and 0x802 were the Gesture events from SDL2. Do not reuse these values! sdl2-compat needs them! */
.BI "
.BI "    /* Clipboard events */
.BI "    SDL_EVENT_CLIPBOARD_UPDATE = 0x900, /**< The clipboard or primary selection changed */
.BI "
.BI "    /* Drag and drop events */
.BI "    SDL_EVENT_DROP_FILE        = 0x1000, /**< The system requests a file open */
.BI "    SDL_EVENT_DROP_TEXT,                 /**< text/plain drag-and-drop event */
.BI "    SDL_EVENT_DROP_BEGIN,                /**< A new set of drops is beginning (NULL filename) */
.BI "    SDL_EVENT_DROP_COMPLETE,             /**< Current set of drops is now complete (NULL filename) */
.BI "    SDL_EVENT_DROP_POSITION,             /**< Position while moving over the window */
.BI "
.BI "    /* Audio hotplug events */
.BI "    SDL_EVENT_AUDIO_DEVICE_ADDED = 0x1100,  /**< A new audio device is available */
.BI "    SDL_EVENT_AUDIO_DEVICE_REMOVED,         /**< An audio device has been removed. */
.BI "    SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED,  /**< An audio device's format has been changed by the system. */
.BI "
.BI "    /* Sensor events */
.BI "    SDL_EVENT_SENSOR_UPDATE = 0x1200,     /**< A sensor was updated */
.BI "
.BI "    /* Pressure-sensitive pen events */
.BI "    SDL_EVENT_PEN_DOWN      = 0x1300,     /**< Pressure-sensitive pen touched drawing surface */
.BI "    SDL_EVENT_PEN_UP,                     /**< Pressure-sensitive pen stopped touching drawing surface */
.BI "    SDL_EVENT_PEN_MOTION,                 /**< Pressure-sensitive pen moved, or angle/pressure changed */
.BI "    SDL_EVENT_PEN_BUTTON_DOWN,            /**< Pressure-sensitive pen button pressed */
.BI "    SDL_EVENT_PEN_BUTTON_UP,              /**< Pressure-sensitive pen button released */
.BI "
.BI "    /* Camera hotplug events */
.BI "    SDL_EVENT_CAMERA_DEVICE_ADDED = 0x1400,  /**< A new camera device is available */
.BI "    SDL_EVENT_CAMERA_DEVICE_REMOVED,         /**< A camera device has been removed. */
.BI "    SDL_EVENT_CAMERA_DEVICE_APPROVED,        /**< A camera device has been approved for use by the user. */
.BI "    SDL_EVENT_CAMERA_DEVICE_DENIED,          /**< A camera device has been denied for use by the user. */
.BI "
.BI "    /* Render events */
.BI "    SDL_EVENT_RENDER_TARGETS_RESET = 0x2000, /**< The render targets have been reset and their contents need to be updated */
.BI "    SDL_EVENT_RENDER_DEVICE_RESET, /**< The device has been reset and all textures need to be recreated */
.BI "
.BI "    /* Internal events */
.BI "    SDL_EVENT_POLL_SENTINEL = 0x7F00, /**< Signals the end of an event poll cycle */
.BI "
.BI "    /** Events ::SDL_EVENT_USER through ::SDL_EVENT_LAST are for your use,
.BI "     *  and should be allocated with SDL_RegisterEvents()
.BI "     */
.BI "    SDL_EVENT_USER    = 0x8000,
.BI "
.BI "    /**
.BI "     *  This last event is only for bounding internal arrays
.BI "     */
.BI "    SDL_EVENT_LAST    = 0xFFFF,
.BI "
.BI "    /* This just makes sure the enum is the size of Uint32 */
.BI "    SDL_EVENT_ENUM_PADDING = 0x7FFFFFFF
.BI "
.BI "} SDL_EventType;
.fi
.SH AVAILABILITY
This enum is available since SDL 3\[char46]0\[char46]0\[char46]

