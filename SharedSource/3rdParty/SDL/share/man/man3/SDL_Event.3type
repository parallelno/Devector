.\" This manpage content is licensed under Creative Commons
.\"  Attribution 4.0 International (CC BY 4.0)
.\"   https://creativecommons.org/licenses/by/4.0/
.\" This manpage was generated from SDL's wiki page for SDL_Event:
.\"   https://wiki.libsdl.org/SDL_Event
.\" Generated with SDL/build-scripts/wikiheaders.pl
.\"  revision SDL-3.1.2-no-vcs
.\" Please report issues in this manpage's content at:
.\"   https://github.com/libsdl-org/sdlwiki/issues/new
.\" Please report issues in the generation of this manpage from the wiki at:
.\"   https://github.com/libsdl-org/SDL/issues/new?title=Misgenerated%20manpage%20for%20SDL_Event
.\" SDL can be found at https://libsdl.org/
.de URL
\$2 \(laURL: \$1 \(ra\$3
..
.if \n[.g] .mso www.tmac
.TH SDL_Event 3type "SDL 3.1.2" "Simple Directmedia Layer" "SDL3 DATATYPES"
.SH NAME
SDL_Event \- The structure for all events in SDL\[char46]
.SH HEADER FILE
Defined in SDL3/SDL_events\[char46]h

.SH SYNOPSIS
.nf
.B #include \(dqSDL3/SDL.h\(dq
.PP
.BI "typedef union SDL_Event
.BI "{
.BI "    Uint32 type;                            /**< Event type, shared with all events, Uint32 to cover user events which are not in the SDL_EventType enumeration */
.BI "    SDL_CommonEvent common;                 /**< Common event data */
.BI "    SDL_DisplayEvent display;               /**< Display event data */
.BI "    SDL_WindowEvent window;                 /**< Window event data */
.BI "    SDL_KeyboardDeviceEvent kdevice;        /**< Keyboard device change event data */
.BI "    SDL_KeyboardEvent key;                  /**< Keyboard event data */
.BI "    SDL_TextEditingEvent edit;              /**< Text editing event data */
.BI "    SDL_TextInputEvent text;                /**< Text input event data */
.BI "    SDL_MouseDeviceEvent mdevice;           /**< Mouse device change event data */
.BI "    SDL_MouseMotionEvent motion;            /**< Mouse motion event data */
.BI "    SDL_MouseButtonEvent button;            /**< Mouse button event data */
.BI "    SDL_MouseWheelEvent wheel;              /**< Mouse wheel event data */
.BI "    SDL_JoyDeviceEvent jdevice;             /**< Joystick device change event data */
.BI "    SDL_JoyAxisEvent jaxis;                 /**< Joystick axis event data */
.BI "    SDL_JoyBallEvent jball;                 /**< Joystick ball event data */
.BI "    SDL_JoyHatEvent jhat;                   /**< Joystick hat event data */
.BI "    SDL_JoyButtonEvent jbutton;             /**< Joystick button event data */
.BI "    SDL_JoyBatteryEvent jbattery;           /**< Joystick battery event data */
.BI "    SDL_GamepadDeviceEvent gdevice;         /**< Gamepad device event data */
.BI "    SDL_GamepadAxisEvent gaxis;             /**< Gamepad axis event data */
.BI "    SDL_GamepadButtonEvent gbutton;         /**< Gamepad button event data */
.BI "    SDL_GamepadTouchpadEvent gtouchpad;     /**< Gamepad touchpad event data */
.BI "    SDL_GamepadSensorEvent gsensor;         /**< Gamepad sensor event data */
.BI "    SDL_AudioDeviceEvent adevice;           /**< Audio device event data */
.BI "    SDL_CameraDeviceEvent cdevice;          /**< Camera device event data */
.BI "    SDL_SensorEvent sensor;                 /**< Sensor event data */
.BI "    SDL_QuitEvent quit;                     /**< Quit request event data */
.BI "    SDL_UserEvent user;                     /**< Custom event data */
.BI "    SDL_TouchFingerEvent tfinger;           /**< Touch finger event data */
.BI "    SDL_PenTipEvent ptip;                   /**< Pen tip touching or leaving drawing surface */
.BI "    SDL_PenMotionEvent pmotion;             /**< Pen change in position, pressure, or angle */
.BI "    SDL_PenButtonEvent pbutton;             /**< Pen button press */
.BI "    SDL_DropEvent drop;                     /**< Drag and drop event data */
.BI "    SDL_ClipboardEvent clipboard;           /**< Clipboard event data */
.BI "
.BI "    /* This is necessary for ABI compatibility between Visual C++ and GCC.
.BI "       Visual C++ will respect the push pack pragma and use 52 bytes (size of
.BI "       SDL_TextEditingEvent, the largest structure for 32-bit and 64-bit
.BI "       architectures) for this union, and GCC will use the alignment of the
.BI "       largest datatype within the union, which is 8 bytes on 64-bit
.BI "       architectures.
.BI "
.BI "       So... we'll add padding to force the size to be the same for both.
.BI "
.BI "       On architectures where pointers are 16 bytes, this needs rounding up to
.BI "       the next multiple of 16, 64, and on architectures where pointers are
.BI "       even larger the size of SDL_UserEvent will dominate as being 3 pointers.
.BI "    */
.BI "    Uint8 padding[128];
.BI "} SDL_Event;
.fi
.SH AVAILABILITY
This struct is available since SDL 3\[char46]0\[char46]0\[char46]

