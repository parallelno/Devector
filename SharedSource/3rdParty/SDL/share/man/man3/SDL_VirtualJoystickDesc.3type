.\" This manpage content is licensed under Creative Commons
.\"  Attribution 4.0 International (CC BY 4.0)
.\"   https://creativecommons.org/licenses/by/4.0/
.\" This manpage was generated from SDL's wiki page for SDL_VirtualJoystickDesc:
.\"   https://wiki.libsdl.org/SDL_VirtualJoystickDesc
.\" Generated with SDL/build-scripts/wikiheaders.pl
.\"  revision SDL-3.1.2-no-vcs
.\" Please report issues in this manpage's content at:
.\"   https://github.com/libsdl-org/sdlwiki/issues/new
.\" Please report issues in the generation of this manpage from the wiki at:
.\"   https://github.com/libsdl-org/SDL/issues/new?title=Misgenerated%20manpage%20for%20SDL_VirtualJoystickDesc
.\" SDL can be found at https://libsdl.org/
.de URL
\$2 \(laURL: \$1 \(ra\$3
..
.if \n[.g] .mso www.tmac
.TH SDL_VirtualJoystickDesc 3type "SDL 3.1.2" "Simple Directmedia Layer" "SDL3 DATATYPES"
.SH NAME
SDL_VirtualJoystickDesc \- The structure that defines an extended virtual joystick description
.SH HEADER FILE
Defined in SDL3/SDL_joystick\[char46]h

.SH SYNOPSIS
.nf
.B #include \(dqSDL3/SDL.h\(dq
.PP
.BI "typedef struct SDL_VirtualJoystickDesc
.BI "{
.BI "    Uint16 type;        /**< `SDL_JoystickType` */
.BI "    Uint16 naxes;       /**< the number of axes on this joystick */
.BI "    Uint16 nbuttons;    /**< the number of buttons on this joystick */
.BI "    Uint16 nhats;       /**< the number of hats on this joystick */
.BI "    Uint16 vendor_id;   /**< the USB vendor ID of this joystick */
.BI "    Uint16 product_id;  /**< the USB product ID of this joystick */
.BI "    Uint16 padding;     /**< unused */
.BI "    Uint32 button_mask; /**< A mask of which buttons are valid for this controller
.BI "                             e.g. (1 << SDL_GAMEPAD_BUTTON_SOUTH) */
.BI "    Uint32 axis_mask;   /**< A mask of which axes are valid for this controller
.BI "                             e.g. (1 << SDL_GAMEPAD_AXIS_LEFTX) */
.BI "    const char *name;   /**< the name of the joystick */
.BI "
.BI "    void *userdata;     /**< User data pointer passed to callbacks */
.BI "    void (SDLCALL *Update)(void *userdata); /**< Called when the joystick state should be updated */
.BI "    void (SDLCALL *SetPlayerIndex)(void *userdata, int player_index); /**< Called when the player index is set */
.BI "    int (SDLCALL *Rumble)(void *userdata, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble); /**< Implements SDL_RumbleJoystick() */
.BI "    int (SDLCALL *RumbleTriggers)(void *userdata, Uint16 left_rumble, Uint16 right_rumble); /**< Implements SDL_RumbleJoystickTriggers() */
.BI "    int (SDLCALL *SetLED)(void *userdata, Uint8 red, Uint8 green, Uint8 blue); /**< Implements SDL_SetJoystickLED() */
.BI "    int (SDLCALL *SendEffect)(void *userdata, const void *data, int size); /**< Implements SDL_SendJoystickEffect() */
.BI "} SDL_VirtualJoystickDesc;
.fi
.SH DESCRIPTION
All elements of this structure are optional and can be left 0\[char46]

.SH AVAILABILITY
This struct is available since SDL 3\[char46]0\[char46]0\[char46]

.SH SEE ALSO
.BR SDL_AttachVirtualJoystickEx (3)
