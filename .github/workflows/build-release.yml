name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.

env:
  BUILD_TYPE: Release

jobs:
  build-windows:
    if: false  # disables this job
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper versioning

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: >-
          mingw-w64-ucrt-x86_64-gcc
          mingw-w64-ucrt-x86_64-cmake
          mingw-w64-ucrt-x86_64-make
          mingw-w64-ucrt-x86_64-ninja
          mingw-w64-ucrt-x86_64-pkg-config
          zip
          git

    - name: Configure CMake
      shell: msys2 {0}
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_EXE_LINKER_FLAGS="-static-libgcc -static-libstdc++ -static" \
          -DCMAKE_SHARED_LINKER_FLAGS="-static-libgcc -static-libstdc++ -static" \
          -G "MinGW Makefiles"

    - name: Build project
      shell: msys2 {0}
      run: |
        cd build
        cmake --build . --config ${{ env.BUILD_TYPE }} --parallel $(nproc)

    - name: Create release package
      shell: pwsh
      run: |
        # Create release directory
        New-Item -ItemType Directory -Force -Path "release/devector"

        # Check if bin directory exists and copy contents
        if (Test-Path "bin") {
          Copy-Item -Path "bin/*" -Destination "release/devector/" -Recurse -Force
          Write-Host "Copied bin directory contents"
        } else {
          Write-Host "Warning: bin directory not found, checking build directory"
          if (Test-Path "build/bin") {
            Copy-Item -Path "build/bin/*" -Destination "release/devector/" -Recurse -Force
            Write-Host "Copied build/bin directory contents"
          } else {
            Write-Host "Error: No bin directory found"
            exit 1
          }
        }

        # Copy additional files if they exist
        @("README.md", "LICENSE", "CHANGELOG.md") | ForEach-Object {
          if (Test-Path $_) {
            Copy-Item -Path $_ -Destination "release/devector/"
            Write-Host "Copied $_"
          }
        }

        # Create ZIP archive using PowerShell
        Compress-Archive -Path "release/devector" -DestinationPath "devector-windows-x64.zip" -Force
        Write-Host "Created devector-windows-x64.zip"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: devector-windows-x64
        path: devector-windows-x64.zip
        retention-days: 30

  build-linux:
    runs-on: [self-hosted, linux]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper versioning

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          git \
          libx11-dev \
          libxcursor-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxi-dev \
          libxext-dev \
          libxfixes-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libasound2-dev \
          libpulse-dev \
          libudev-dev \
          libdbus-1-dev \
          libusb-1.0-0-dev \
          libwayland-dev \
          wayland-protocols \
          libxkbcommon-dev \
          libegl1-mesa-dev \
          libdrm-dev \
          libxss-dev \
          libgbm-dev

    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_EXE_LINKER_FLAGS="-static-libgcc -static-libstdc++ -Wl,--as-needed" \
          -DCMAKE_C_FLAGS="-O3 -march=x86-64 -mtune=generic" \
          -DCMAKE_CXX_FLAGS="-O3 -march=x86-64 -mtune=generic" \
          -G "Ninja"

    - name: Build LuaJIT manually
      run: |
        cd build/_deps/luajit-src
        make clean || true
        make BUILDMODE=static TARGET_CFLAGS="-m64" -j$(nproc)
        echo "LuaJIT build completed"
        ls -la src/

    - name: Build project
      run: |
        cd build
        cmake --build . --config ${{ env.BUILD_TYPE }} --parallel $(nproc)

    - name: Create release package
      run: |
        # Create release directory
        mkdir -p release/devector

        # Check if bin directory exists and copy contents
        if [ -d "bin" ]; then
          cp -r bin/* release/devector/
          echo "Copied bin directory contents"
        elif [ -d "build/bin" ]; then
          cp -r build/bin/* release/devector/
          echo "Copied build/bin directory contents"
        else
          echo "Error: No bin directory found"
          exit 1
        fi

        # Copy additional files if they exist
        for file in README.md LICENSE CHANGELOG.md; do
          if [ -f "$file" ]; then
            cp "$file" release/devector/
            echo "Copied $file"
          fi
        done

        # Create tar.gz archive
        cd release
        tar -czf ../devector-linux-x64.tar.gz devector/
        echo "Created devector-linux-x64.tar.gz"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: devector-linux-x64
        path: devector-linux-x64.tar.gz
        retention-days: 30

  release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: devector-*
        path: ./
        merge-multiple: true

    - name: Extract tag name
      id: tag_name
      run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog section for this version if it exists
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes in ${{ steps.tag_name.outputs.TAG_NAME }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Built with:" >> $GITHUB_OUTPUT
          echo "- GCC 13.2.0 (MSYS2 UCRT64)" >> $GITHUB_OUTPUT
          echo "- C++20 standard" >> $GITHUB_OUTPUT
          echo "- Static linking for portability" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Package Contents" >> $GITHUB_OUTPUT
          echo "**Windows (devector-windows-x64.zip):**" >> $GITHUB_OUTPUT
          echo "- devector.exe - Main executable" >> $GITHUB_OUTPUT
          echo "- SDL3.dll - Required SDL3 library" >> $GITHUB_OUTPUT
          echo "- Resource files and data" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Linux (devector-linux-x64.tar.gz):**" >> $GITHUB_OUTPUT
          echo "- devector - Main executable" >> $GITHUB_OUTPUT
          echo "- Resource files and data" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "Release ${{ steps.tag_name.outputs.TAG_NAME }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Features:" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Updates:" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Fixes:" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
        name: Release ${{ steps.tag_name.outputs.TAG_NAME }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        files: |
          devector-windows-x64.zip
          devector-linux-x64.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}