name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: >-
          mingw-w64-ucrt-x86_64-gcc
          mingw-w64-ucrt-x86_64-cmake
          mingw-w64-ucrt-x86_64-ninja
          mingw-w64-ucrt-x86_64-pkg-config
          mingw-w64-ucrt-x86_64-gtk3
          git
          make

    - name: Set up build environment
      shell: msys2 {0}
      run: |
        echo "CC=gcc" >> $GITHUB_ENV
        echo "CXX=g++" >> $GITHUB_ENV
        echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV

    - name: Create build directory
      shell: msys2 {0}
      run: |
        mkdir -p build

    - name: Configure CMake
      shell: msys2 {0}
      run: |
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_CXX_COMPILER=g++ \
          -G Ninja

    - name: Build project
      shell: msys2 {0}
      run: |
        cd build
        cmake --build . --config ${{ env.BUILD_TYPE }} -j $(nproc)

    - name: Verify build artifacts
      shell: msys2 {0}
      run: |
        ls -la bin/
        if [ ! -f "bin/devector.exe" ]; then
          echo "Error: devector.exe not found in bin directory"
          exit 1
        fi

    - name: Package artifacts
      shell: msys2 {0}
      run: |
        # Create release directory
        mkdir -p release/devector

        # Copy all bin contents to release directory
        cp -r bin/* release/devector/

        # Create ZIP archive
        cd release
        zip -r ../devector-windows-x64.zip devector/

        # Verify ZIP contents
        cd ..
        unzip -l devector-windows-x64.zip

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: devector-windows-x64
        path: devector-windows-x64.zip
        retention-days: 30

    outputs:
      artifact-name: devector-windows-x64.zip

  release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: devector-windows-x64
        path: ./artifacts

    - name: Generate changelog
      id: changelog
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

        # If this is the first tag, use initial commit
        if [ -z "$LATEST_TAG" ]; then
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        else
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^)
        fi

        echo "Generating changelog from $PREVIOUS_TAG to $GITHUB_REF_NAME"

        # Generate changelog
        CHANGELOG=$(git log --oneline --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$GITHUB_SHA | head -50)

        # Create changelog file
        cat > CHANGELOG.md << EOF
        ## Changes in $GITHUB_REF_NAME

        $CHANGELOG

        ## Build Information
        - Built on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - Commit: $GITHUB_SHA
        - Compiler: GCC 13.2.0 (UCRT64)
        - Target: Windows x64
        EOF

        echo "changelog-file=CHANGELOG.md" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/devector-windows-x64.zip
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update release description
      run: |
        echo "âœ… Release ${{ github.ref_name }} created successfully"
        echo "ðŸ“¦ Artifact: devector-windows-x64.zip"
        echo "ðŸŽ¯ Target: Windows x64"
        echo "ðŸ”§ Toolchain: GCC 13.2.0 (UCRT64)"